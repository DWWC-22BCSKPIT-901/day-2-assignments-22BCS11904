#include <iostream>
#include <vector>
#include <algorithm>

bool isValid(const std::vector<int>& jobs, int n, int k, int maxTime) {
    std::vector<int> workers(k, 0);
    int i = 0;
    while (i < n) {
        bool assigned = false;
        for (int j = 0; j < k; j++) {
            if (workers[j] + jobs[i] <= maxTime) {
                workers[j] += jobs[i++];
                assigned = true;
                break;
            }
        }
        if (!assigned) return false;
    }
    return true;
}

int findMinimumTime(std::vector<int>& jobs, int k) {
    int n = jobs.size();
    int left = *std::max_element(jobs.begin(), jobs.end());
    int right = std::accumulate(jobs.begin(), jobs.end(), 0);
    int result = right;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (isValid(jobs, n, k, mid)) {
            result = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return result;
}

int main() {
    std::vector<int> jobs = {10, 7, 8, 12, 6, 8};
    int k = 3;
    std::cout << findMinimumTime(jobs, k) << std::endl;
    return 0;
}
